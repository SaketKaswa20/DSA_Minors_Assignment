class Node {
    int data;
    Node left;
    Node right;

    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

public class BinaryTree {
    Node root;

    // Function to delete a node from the binary tree
    public void delete(int key) {
        root = deleteNode(root, key);
    }

    private Node deleteNode(Node root, int key) {
        if (root == null)
            return root;

        if (root.left == null && root.right == null) {
            if (root.data == key)
                return null;
            else
                return root;
        }

        java.util.LinkedList<Node> queue = new java.util.LinkedList<>();
        queue.add(root);

        Node keyNode = null;
        Node lastNode = null;

        while (!queue.isEmpty()) {
            lastNode = queue.poll();
            if (lastNode.data == key)
                keyNode = lastNode;

            if (lastNode.left != null)
                queue.add(lastNode.left);

            if (lastNode.right != null)
                queue.add(lastNode.right);
        }

        if (keyNode != null) {
            int x = lastNode.data;
            deleteDeepest(root, lastNode);
            keyNode.data = x;
        }

        return root;
    }

    private void deleteDeepest(Node root, Node deleteNode) {
        java.util.LinkedList<Node> queue = new java.util.LinkedList<>();
        queue.add(root);

        Node temp;

        while (!queue.isEmpty()) {
            temp = queue.poll();

            if (temp == deleteNode) {
                temp = null;
                return;
            }

            if (temp.right != null) {
                if (temp.right == deleteNode) {
                    temp.right = null;
                    return;
                } else {
                    queue.add(temp.right);
                }
            }

            if (temp.left != null) {
                if (temp.left == deleteNode) {
                    temp.left = null;
                    return;
                } else {
                    queue.add(temp.left);
                }
            }
        }
    }
}
